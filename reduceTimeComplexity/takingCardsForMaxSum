// 카드 가져가기(그리디 알고리즘 & 슬라이딩 윈도우)
// 일렬로 놓인 n개의 카드의 양 끝에서만 카드 k개를 취해 주어진 상황에서 최대값을 만드는 프로그램 작성
// 시간복잡도를 줄이기 위해 이중 for문 대신 다음과 같이 작성할 수 있다 !

function solution(nums, k){
  // 주어진 카드의 수들의 총합
  let answer = nums.reduce((a, b) => a + b, 0)
  let sum = 0;
  // 뽑을 수 있는 카드 개수만큼만 뺀 나머지 개수의 슬라이딩 윈도우의 합들 중 최소합을 찾을 예정
  let len = nums.length - k
  // 최소합
  for(let i = 0; i < len; i += 1) sum += nums[i];
  // 슬라이딩 윈도우가 최소합이 되는 경우를 전체합에서 빼면 양쪽의 합이 최대가 되는 값을 구할 수 있다.
  // 처음의 수열 - k 개의 카드값의 합을 minS로 초기화한다.
  let minS = sum;
  // 왼쪽 요소의 인덱스 
  let lt = 0;
  // 오른쪽 요소의 인덱스 rt, 오른쪽으로 하나씩 동일한 크기도 이동하면서 범위 안의 총합을 구하고 
  // 그 중 가장 작은 값을 찾는다. 
  for(let rt = len; rt < nums.length; rt += 1) {
    sum += (nums[rt] - nums[lt])
    minS = Math.min(minS, sum);
    lt += 1;
  }  
  // 전체 합에서 k개 만큼의 부분 최소합을 빼면 원하는 답을 얻을 수 있다.
  return answer - minS;
}

console.log(solution([2, 3, 7, 1, 2, 1, 5], 4));
console.log(solution([1, 30, 5, 6, 7], 3));
console.log(solution([1, 2, 3, 5, 6, 7, 1, 3, 9], 5));
